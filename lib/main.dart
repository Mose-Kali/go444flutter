import 'dart:ffi';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:amap_flutter_map/amap_flutter_map.dart';
import 'package:amap_flutter_base/amap_flutter_base.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:go444flutter/video.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:go444flutter/drawer.dart';
import 'package:go444flutter/marker.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Go! 444',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a purple toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(
            seedColor: const Color.fromARGB(255, 45, 253, 149)),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Go! 班级蹭饭App'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;
  final bool _toggleEasterEgg = true;
  late AMapController _controller;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      Fluttertoast.cancel();
      Fluttertoast.cancel();
      Fluttertoast.cancel();
      Fluttertoast.cancel();
      Fluttertoast.cancel();
      Fluttertoast.cancel();
      _counter++;
      if (_counter >= 5 && _toggleEasterEgg) {
        Fluttertoast.showToast(
            msg: "还剩${10 - _counter}下进入彩蛋！", toastLength: Toast.LENGTH_SHORT);
      }
      if (_counter >= 10 && _toggleEasterEgg) {
        _counter = 0;
        Navigator.of(context).push(MaterialPageRoute(builder: (context) {
          return VideoPage();
        }));
      }
    });
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _requestLocaitonPermission();
  }

  @override
  void reassemble() {
    // TODO: implement reassemble
    super.reassemble();
    _requestLocaitonPermission();
  }

  void _onMapCreate(AMapController controller) {
    _controller = controller;
  }

  void _onLocationChanged(AMapLocation args) {
    print("Latlnt:${args.latLng}");
  }

  void _requestLocaitonPermission() async {
    PermissionStatus status = await Permission.location.request();
    print('permissionStatus=====> $status');
  }

  Set<Marker> markers = {};
  Set<MarkerItem> markerItems = {};
  late AMapWidget amap;

  Set<Marker> getMarkerList() {
    //BitmapDescriptor.fromAssetImage(ImageConfiguration(size: Size(256,256)), "asset/")
    markers.clear();
    markerItems.clear();
    String str = "";

    //Auto Generated by Rosy
    str = "asset/svg0.png";
    markerItems
        .add(MarkerItem("张三", "陕西西安", "19100000000", str, 34.24, 108.92));
    markers.add(Marker(
        position: const LatLng(34.24, 108.92),
        icon: BitmapDescriptor.fromIconPath(str),
        infoWindow: const InfoWindow(
            title: "张三", snippet: "地址：陕西西安\n大学：西北工业大学\n电话：19100000000")));
    
    //End Here

    return markers;
  }

  void _moveToPerson(double latitude, double longitude) {
    _controller.moveCamera(CameraUpdate.newCameraPosition(
        CameraPosition(target: LatLng(latitude, longitude), zoom: 19)));
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    const AMapPrivacyStatement amapPrivacy =
        AMapPrivacyStatement(hasContains: true, hasShow: true, hasAgree: true);
    const AMapApiKey amapApiKeys =
        AMapApiKey(androidKey: 'your_api_key');
    amap = AMapWidget(
      privacyStatement: amapPrivacy,
      onMapCreated: _onMapCreate,
      onLocationChanged: _onLocationChanged,
      initialCameraPosition:
          const CameraPosition(target: LatLng(36.909187, 110.397451), zoom: 4),
      myLocationStyleOptions: MyLocationStyleOptions(
        true,
        circleFillColor: Colors.lightBlue,
        circleStrokeColor: Colors.blue,
        circleStrokeWidth: 1,
      ),
      apiKey: amapApiKeys,
      trafficEnabled: true,
      markers: getMarkerList(),
    );
    DrawerList drawerList = DrawerList();
    drawerList.setupContent(markerItems);
    drawerList.setCallback(_moveToPerson);
    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
        shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.only(
                bottomRight: Radius.circular(10),
                bottomLeft: Radius.circular(10),
                topLeft: Radius.zero,
                topRight: Radius.zero),
            side: BorderSide(
              style: BorderStyle.none,
            )),
      ),
      body: Center(
          // Center is a layout widget. It takes a single child and positions it
          // in the middle of the parent.
          child:
              // Column(
              //   // Column is also a layout widget. It takes a list of children and
              //   // arranges them vertically. By default, it sizes itself to fit its
              //   // children horizontally, and tries to be as tall as its parent.
              //   //
              //   // Column has various properties to control how it sizes itself and
              //   // how it positions its children. Here we use mainAxisAlignment to
              //   // center the children vertically; the main axis here is the vertical
              //   // axis because Columns are vertical (the cross axis would be
              //   // horizontal).
              //   //
              //   // TRY THIS: Invoke "debug painting" (choose the "Toggle Debug Paint"
              //   // action in the IDE, or press "p" in the console), to see the
              //   // wireframe for each widget.
              //   mainAxisAlignment: MainAxisAlignment.center,
              //   children: <Widget>[
              //     const Text(
              //       'You have pushed the button this many times:',
              //     ),
              //     Text(
              //       '$_counter',
              //       style: Theme.of(context).textTheme.headlineMedium,
              //     ),
              //   ],
              // ),
              amap),
      floatingActionButton: Builder(builder: (context) {
        return Stack(children: <Widget>[
          Padding(
              padding: const EdgeInsets.only(bottom: 65),
              child: Align(
                alignment: Alignment.bottomRight,
                child: FloatingActionButton(
                  onPressed: () {
                    MarkerItem ritem = markerItems
                        .elementAt(Random().nextInt(markerItems.length - 1));
                    _moveToPerson(ritem.latitude, ritem.longtitude);
                  },
                  tooltip: '随机',
                  heroTag: "<Floating Random>",
                  child: const Icon(Icons.sync),
                ),
              )),
          Padding(
              padding: const EdgeInsets.only(bottom: 130),
              child: Align(
                alignment: Alignment.bottomRight,
                child: FloatingActionButton(
                  onPressed: () {
                    _controller.moveCamera(CameraUpdate.newCameraPosition(
                        const CameraPosition(
                            target: LatLng(36.909187, 110.397451), zoom: 4)));
                    _incrementCounter();
                  },
                  tooltip: '重置定位',
                  heroTag: "<Floating Reset>",
                  child: const Icon(Icons.my_location),
                ),
              )),
          Align(
            alignment: Alignment.bottomRight,
            child: FloatingActionButton(
              onPressed: () => Scaffold.of(context).openEndDrawer(),
              tooltip: '花名册',
              child: const Icon(Icons.contacts),
            ),
          ),
          // const Positioned(
          //     left: 30,
          //     bottom: 25,
          //     child: Align(
          //       alignment: Alignment.bottomRight,
          //       child: IgnorePointer(
          //         child: Text(
          //             "班主任：刘亚玲(生物)\n任课老师：\n郑诚(语文),柳建显(数学)\n李洁英(英语),朱日剑(物理),蒋涛(化学)"),
          //       ),
          //     )),
        ]);
      }),
      endDrawer: drawerList,
    );
  }
}
